d = {"examples": [
    {
        "id": 1,
        "name": "Cat battle",
        "condition":
            """
В компании X есть своя система контроля версий. Эта VCS не умеет анализировать изменения в файлах и может смёржить два реквеста автоматически, если они не содержат изменений в одних и тех же файлах.
В определённый момент запускается робот, который автоматически мёржит в мастер пулл-реквесты. Задача робота — смёржить наибольшее количество изменений, после чего дежурный разработчик собирает текущий мастер в релиз и отдаёт его в тестирование.
Робот принимает на вход список реквестов, отсортированных по времени создания. В данных о каждом реквесте содержится список файлов, которые в нём изменились, и время создания реквеста. В каждом реквесте может быть изменён хотя бы один файл.
Робот должен вернуть массив с идентификаторами реквестов в том порядке, в котором их нужно смёржить. При этом робот должен влить максимум изменений (количество изменённых файлов) без конфликтов в порядке времени создания реквестов.
Напишите код этого робота.
        """,
        "input": "На вход подаётся массив реквестов. Длина массива - не более 1000, количество конфликтующих между собой пулл-реквестов заранее не известно.",
        "output":
            """
            Код робота должен экспортироваться в виде CommonJS-модуля вида:
/**
* @param {PullRequest[]} pullRequests массив PR, отсортированных по времени создания
* @returns {string[]} идентификаторы реквестов в порядке мёржа
*/
module.exports = function (pullRequests) {
// ваш код
}""",
        "note": "Ваше решение не должно использовать внешних зависимостей.",
        "max_score": 1,
        "time_limit": 1000,
        "memory_limit": 1024,
        "tags": "algorithms, LNP"
                ""
    },
    {
        "id": 2,
        "name": "КАфе",
        "condition":
            """
Около Петиного университета недавно открылось новое кафе, в котором действует следующая система скидок: при каждой покупке более чем на 100 рублей покупатель получает купон, дающий право на один бесплатный обед (при покупке на сумму 100 рублей и меньше такой купон покупатель не получает).

Однажды Пете на глаза попался прейскурант на ближайшие N дней. Внимательно его изучив, он решил, что будет обедать в этом кафе все N дней, причем каждый день он будет покупать в кафе ровно один обед. Однако стипендия у Пети небольшая, и поэтому он хочет по максимуму использовать предоставляемую систему скидок так, чтобы его суммарные затраты были минимальны. Требуется найти минимально возможную суммарную стоимость обедов и номера дней, в которые Пете следует воспользоваться купонами.
        """,
        "input": "На вход подаётся массив реквестов. Длина массива - не более 1000, количество конфликтующих между собой пулл-реквестов заранее не известно.",
        "output":
            """
            Код робота должен экспортироваться в виде CommonJS-модуля вида:
/**
* @param {PullRequest[]} pullRequests массив PR, отсортированных по времени создания
* @returns {string[]} идентификаторы реквестов в порядке мёржа
*/
module.exports = function (pullRequests) {
// ваш код
}""",
        "note": "Ваше решение не должно использовать внешних зависимостей.",
        "max_score": 2,
        "time_limit": 1000,
        "memory_limit": 1024,
        "tags": "graph"
                ""
    }
]
}
